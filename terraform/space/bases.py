from time import sleep
import globals
<<<<<<< HEAD
=======
import os
>>>>>>> origin/HEAD
from threading import Thread
from space.rocket import Rocket
from random import choice, randint

class SpaceBase(Thread):

    ################################################
    # O CONSTRUTOR DA CLASSE N√ÉO PODE SER ALTERADO #
    ################################################
    def __init__(self, name, fuel, uranium, rockets):
        Thread.__init__(self)
        self.name = name
        self.uranium = 0
        self.fuel = 0
        self.rockets = 0
        self.constraints = [uranium, fuel, rockets]

    def print_space_base_info(self):
        print(f"üî≠ - [{self.name}] ‚Üí ü™®  {self.uranium}/{self.constraints[0]} URANIUM  ‚õΩ {self.fuel}/{self.constraints[1]}  üöÄ {self.rockets}/{self.constraints[2]}")
    
    def base_rocket_resources(self, rocket): #Decrementa estoque de combustivel e ur√¢nio. Chama a fun√ß√£o de abastecimento depois. (ALTERA√á√ïES: rocket_name alterado para o objeto ROCKET)

        with globals.get_locks_armazem()[self.name]: #este lock protege toda a opera√ß√£o de reabastecimento de cada foguete em cada base

<<<<<<< HEAD
            match rocket.name:   #Controle de concorr√™ncia √© necess√°rio nas linhas que decrementam o pr√≥prio estoque j√° que ele pode estar abastecendo multiplos foguetes
                case 'DRAGON':   #Talvez seja preciso um controle para a leitura tamb√©m para que ele n√£o leia que pode abastecer enquanto outro j√° est√° tirando a quantidade necess√°ria do estoque
                                            
                    if self.uranium > 35 and self.fuel > 50:
                        self.uranium = self.uranium - 35 #
                        rocket.uranium_cargo = 35

                        if self.name == 'ALCANTARA':
                            self.fuel = self.fuel - 70 #
                            rocket.fuel_cargo = 70
                            
                        elif self.name == 'MOON':
                            self.fuel = self.fuel - 50 #
                            rocket.fuel_cargo = 50

                        else:
                            self.fuel = self.fuel - 100 #
                            rocket.fuel_cargo = 100

                case 'FALCON':

                    if self.uranium > 35 and self.fuel > 90:
                        self.uranium = self.uranium - 35 #
                        rocket.uranium_cargo = 35

                        if self.name == 'ALCANTARA':
                            self.fuel = self.fuel - 100 #
                            rocket.fuel_cargo = 100

                        elif self.name == 'MOON':
                            self.fuel = self.fuel - 90 #
                            rocket.fuel_cargo = 90

                        else:
                            self.fuel = self.fuel - 120 #
                            rocket.fuel_cargo = 120

                case 'LION':
                    if self.uranium > 35 and self.fuel > 100:
                        self.uranium = self.uranium - 35 #
                        rocket.uranium_cargo = 35  

                        if self.name == 'ALCANTARA':
                            self.fuel = self.fuel - 100 #
                            rocket.fuel_cargo = 100

                        else:
                            self.fuel = self.fuel - 115 #
                            rocket.fuel_cargo = 115


                case _:
                    print("Invalid rocket name")
=======
            match rocket.name:

                case 'DRAGON':   
                    #Se tiver recursos o suficiente para abastecer o foguete, abastece                         
                    if self.uranium > 35 and self.fuel > 100:
                        self.uranium = self.uranium - 35 

                        if self.name == 'ALCANTARA':
                            self.fuel = self.fuel - 70 
                            
                        elif self.name == 'MOON':
                            self.fuel = self.fuel - 50 

                        else:
                            self.fuel = self.fuel - 100 
                    #Caso contr√°rio, fun√ß√£o retorna falso
                    else:
                        return False

                case 'FALCON':
                    #Se tiver recursos o suficiente para abastecer o foguete, abastece    
                    if self.uranium > 35 and self.fuel > 120:
                        self.uranium = self.uranium - 35 

                        if self.name == 'ALCANTARA':
                            self.fuel = self.fuel - 100 

                        elif self.name == 'MOON':
                            self.fuel = self.fuel - 90 

                        else:
                            self.fuel = self.fuel - 120 
                    #Caso contr√°rio, fun√ß√£o retorna falso
                    else:
                        return False

                case 'LION':
                    #Se tiver recursos o suficiente para abastecer o foguete, abastece 
                    if self.uranium > 75 and self.fuel > 235: #235 = 115 combust√≠vel pra voar + 120 combust√≠vel para reabastecer lua
                        self.uranium = self.uranium - 75 # 75 = carga de ur√¢nio para reabastecer lua
                        rocket.uranium_cargo = 75  

                        if self.name == 'ALCANTARA':
                            self.fuel = self.fuel - 220 # 220 = 100 combust√≠vel pra voar + 120 combust√≠vel para reabastecer lua
                            rocket.fuel_cargo = 220

                        else:
                            self.fuel = self.fuel - 235 #235 = 115 combust√≠vel pra voar + 120 combust√≠vel para reabastecer lua
                            rocket.fuel_cargo = 235
                    #Caso contr√°rio, fun√ß√£o retorna falso
                    else:
                        return False

                case _:
                    print("Invalid rocket name")
        return True
>>>>>>> origin/HEAD


    def refuel_oil(self):
        #Reestoca base
<<<<<<< HEAD
        if self.name == 'MOON': #a lua n√£o tem acesso as minas da terra. toda a carga vem do foguete LION
            if self.fuel < 50: #50 por que √© a quantidade de combustivel necess√°ria para lan√ßar o maior foguete da Lua
                pass #AQUI SER√Å A SINALIZA√á√ÉO PARA O ENVIO DE FOGUETES LION PARA LUA
        else:
            if self.fuel < self.constraints[1]:
                mina_combustivel = globals.get_mines_ref()['oil_earth']
                with globals.mutex_mina_combustivel:
                        if mina_combustivel.unities >=100: #100 por que √© o minimo pra abastecer o foguete m√©dio. Talvez pegar o maior seja melhor
                            mina_combustivel.unities -= 100
                            self.fuel +=100
=======
        if self.name == 'MOON': #A lua n√£o tem acesso as minas da terra
            pass
        else:
            if self.fuel < self.constraints[1]: # Se a quantidad de combust√≠vel √© inferior ao limite de combustivel:
                mina_combustivel = globals.get_mines_ref()['oil_earth']
                with globals.mutex_mina_combustivel: # Mutex protege o acesso a mina de combust√≠vel
                        if mina_combustivel.unities >=100: # Se a mina de combustivel tem mais que 100 unidades produzidas
                            mina_combustivel.unities -= 100 # Tira 100 unidades de combust√≠vel da mina 
                            self.fuel +=100 # Bota 100 unidades de combust√≠vel na base
                            if self.fuel > self.constraints[1]: # se o carregamento trouxe material demais para o reservat√≥rio:
                                mina_combustivel.unities += self.fuel - self.constraints[1] # devolve o excesso para as minas
                                self.fuel = self.constraints[1] # quantidade de combust√≠vel = quantidade m√°xima de combust√≠vel.
>>>>>>> origin/HEAD


    def refuel_uranium(self):
        #Reestoca base
<<<<<<< HEAD
        if self.name == 'MOON': #a lua n√£o tem acesso as minas da terra. toda a carga vem do foguete LION
             if self.uranium < 35:
                pass #SINALIZA√á√ÉO PARA ENVIO DE FOGUETES LION
        else:
            if self.uranium < self.constraints[0]:
                mina_uranio = globals.get_mines_ref()['uranium_earth']
                with globals.mutex_mina_ur√¢nio:
                    if mina_uranio.unities >= 35: #35 por que 35 √© a carga necess√°ria para uma ogiva.
                        mina_uranio.unities -= 35 
                        self.uranium += 35 # Reabastece

    def build_rocket(self):
        valor_max = 3
        if self.name == 'MOON': #A base lunar n√£o pode construir o foguete LION
            valor_max = 2
        if self.rockets < self.constraints[2]:
            foguete_construido = randint(1,valor_max)
            #como armazenar esses foguetes? uma lista? acho que sim
            match foguete_construido:
                case 1:
                    self.foguetes_estacionados.append(Rocket('DRAGON')) #constroi um DRAGON
                    self.base_rocket_resources(self.foguetes_estacionados[len(self.foguetes_estacionados)-1])
                case 2:
                    self.foguetes_estacionados.append(Rocket('FALCON'))#constroi um FALCON
                    self.base_rocket_resources(self.foguetes_estacionados[len(self.foguetes_estacionados)-1])
                case 3:
                    self.foguetes_estacionados.append(Rocket('LION')) #constroi um LION
                    self.base_rocket_resources(self.foguetes_estacionados[len(self.foguetes_estacionados)-1])
            self.rockets += 1   

    def launch_rocket(self): #chama a fun√ß√£o rocket.launch() com os parametros certinhos. Tem que dar prefer√™ncia pra lan√ßamento de Lions para a Lua caso seja chamado.
        if len(self.foguetes_estacionados)>0: # n√£o pode lan√ßar um foguete se n√£o tem nenhum foguete estacionado
            planetas = globals.get_planets_ref()
            alvo = False
            if len(self.foguetes_estacionados) >1:
                foguete_lan√ßado = randint(0,len(self.foguetes_estacionados)-1)
            else:
                foguete_lan√ßado = 0
            
            if not(globals.satelites_de_leitura['mars'].locked()): #ve se o satelite para ler habitabilidade de marte est√° dispon√≠vel
                with globals.satelites_de_leitura['mars']:
                    if planetas['mars'].terraform > 0: #se o planeta ainda n√£o estiver terraformado
                        globals.semaforo_planeta['mars'].acquire() #lan√ßa um foguete para marte e tranca o semaforo para o planeta
                        alvo = planetas['mars'] # coloca marte como alvo do foguete

            elif not(globals.satelites_de_leitura['io'].locked()):
                with globals.satelites_de_leitura['io']:
                    if planetas['io'].terraform > 0:
                        globals.semaforo_planeta['io'].acquire()
                        alvo = planetas['io']
            
            elif not(globals.satelites_de_leitura['ganimedes'].locked()):
                with globals.satelites_de_leitura['ganimedes']:
                    if planetas['ganimedes'].terraform > 0:
                        globals.semaforo_planeta['ganimedes'].acquire()
                        alvo = planetas['ganimedes']
            
            elif not(globals.satelites_de_leitura['europa'].locked()):
                with globals.satelites_de_leitura['europa']:
                    if planetas['europa'].terraform > 0:
                        globals.semaforo_planeta['europa'].acquire()
                        alvo = planetas['europa']

            if(alvo == False):         
                return  
            else:    
                self.foguetes_estacionados[foguete_lan√ßado].launch(self, alvo)
                globals.semaforo_planeta[alvo.name.lower()].release() #independente do resultado da miss√£o, o pr√≥ximo foguete pode ser lan√ßado.
                self.foguetes_estacionados.remove(self.foguetes_estacionados[foguete_lan√ßado]) #tira o foguete lan√ßado da lista de foguetes estacionados
                self.rockets -= 1
        #print("\n\nN√ÉO TEM FOGUETES\n\n")

    def run(self): #Thread dos foguetes [A FAZER]
=======
        if self.name == 'MOON': #A lua n√£o tem acesso as minas da terra
            pass
        else:
            if self.uranium < self.constraints[0]:
                mina_uranio = globals.get_mines_ref()['uranium_earth']
                with globals.mutex_mina_ur√¢nio: # Mutex protege o acesso a mina de ur√¢nio
                    if mina_uranio.unities >= 100: # Se a mina de ur√¢nio tem mais que 100 unidades produzidas
                        mina_uranio.unities -= 100 # Tira 100 unidades de ur√¢nio da mina 
                        self.uranium += 100 # Bota 100 unidades de ur√¢nio na base
                        if self.uranium > self.constraints[0]: # se o carregamento trouxe material demais para o reservat√≥rio:
                            mina_uranio.unities += self.uranium - self.constraints[0]  # devolve o excesso para as minas
                            self.uranium = self.constraints[0] # quantidade de ur√¢nio = quantidade m√°xima de ur√¢nio.

    def build_rocket(self):
        valor_max = 3
        if self.name == 'MOON':
             # Como a base lunar n√£o pode produzir foguetes LION, o valor_max do gerador de n√∫mero aleat√≥rio √© limitado em 2 para evitar que um LION seja construido na lua
            valor_max = 2
        if self.rockets < self.constraints[2]: # Se o n√∫mero atual de foguetes √© menor que o limite de foguetes na base:
            foguete_construido = randint(1,valor_max) # gera um n√∫mero aleat√≥rio para decidir qual foguete construir

            match foguete_construido:
                case 1:
                    self.foguetes_estacionados.append(Rocket('DRAGON')) #constroi um DRAGON e o coloca na lista de foguetes prontos pra voar
                    
                case 2:
                    self.foguetes_estacionados.append(Rocket('FALCON'))#constroi um FALCON e o coloca na lista de foguetes prontos pra voar

                case 3:
                    self.foguetes_estacionados.append(Rocket('LION')) #constroi um LION e o coloca na lista de foguetes prontos pra voar
                    
            
            if not(self.base_rocket_resources(self.foguetes_estacionados[self.rockets-1])): # tenta abastecer o foguete rec√©m-criado com ur√¢nio e combust√≠vel
                #Se a base n√£o tem combust√≠vel ou ur√¢nio o suficiente, a fun√ß√£o retorna FALSE, o foguete n√£o √© construido e √© removido da lista de foguetes
                self.foguetes_estacionados.remove(self.foguetes_estacionados[self.rockets-1]) 
            else:
                self.rockets += 1


    def launch_rocket(self): # chama a fun√ß√£o rocket.launch() com os parametros certinhos.
        if self.rockets > 0: # Se a base tem pelo menos um foguete estacionado:
            planetas = globals.planets
            satelite = globals.satelites_de_leitura
            alvo = False
                
                    
            if len(planetas)>1: # se tem mais de um planeta que ainda deve ser terraformado
                random_target_number = randint(0, len(planetas)-1) #gera um n√∫mero aleat√≥rio para escolher qual planeta ser√° o alvo
            else: #se s√≥ tiver um planeta que ainda n√£o foi terraformado, esse planeta ser√° o alvo
                random_target_number = 0

            if self.rockets > 1: # Se a base possui mais de um foguete estacionado:
                num_foguete = randint(0, self.rockets-1) # escolhe aleat√≥riamente entre os x foguetes estacionados
                foguete_selecionado = self.foguetes_estacionados[num_foguete] #o foguete que ser√° lan√ßado √© igual ao foguete na NUM_FOGUETE posi√ß√£o da lista FOGUETES_ESTACIONADOS
            else: # Se a base possui apenas 1 foguete estacionado:
                num_foguete = 0
                foguete_selecionado = self.foguetes_estacionados[num_foguete] #o foguete que ser√° lan√ßado √© igual ao foguete na NUM_FOGUETE posi√ß√£o da lista FOGUETES_ESTACIONADOS

            if foguete_selecionado.name == "LION": # se o foguete selecionado for um LION:
                with globals.mutex_armazenamento['MOON']: #Mutex protege a leitura da lua
                    if (globals.get_bases_ref()['moon'].uranium>35 and globals.get_bases_ref()['moon'].fuel > 90):
                        # SE A BASE DECIDIR LAN√áAR UM FOGUETE LION MAS A LUA SINALIZAR QUE N√ÉO PRECISA DE RECURSOS, O FOGUETE N√ÉO RECEBERA UM ALVO E N√ÉO SER√Å LAN√áADO
                        return
            
            for i, key in enumerate(planetas.keys()): #enumera as chaves
                if i == random_target_number: #ao chegar na chave equivalente ao numero gerado aleat√≥riamente
                    with satelite[planetas[key].name.lower()]: #ativa o mutex do planeta
                        if planetas[key].terraform > 0: #checa se o planeta ainda deve ser terraformado
                            alvo = planetas[key]       #seta o planeta como alvo para lan√ßamento       
                            break
                
                
            
            if (alvo): #se algum alvo foi adquirido:
                
                globals.semaforo_limite_foguetes_ativos.acquire()
                Thread(target=foguete_selecionado.launch, args=(self, alvo)).start() #Cria a thread do foguete lan√ßado
                self.foguetes_estacionados.remove(foguete_selecionado) #tira o foguete lan√ßado da lista de foguetes estacionados
                self.rockets -= 1


    def run(self):
>>>>>>> origin/HEAD
        self.foguetes_estacionados = []
        globals.acquire_print()
        self.print_space_base_info()
        globals.release_print()
        

<<<<<<< HEAD
        while(globals.get_release_system() == False):
            pass

        while(True):
            #self.print_space_base_info()
=======
        while(globals.get_release_system() == False): #enquanto a simula√ß√£o n√£o √© totalmente inicializada: n√£o faz nada
            pass

        while(True):

            
>>>>>>> origin/HEAD
            self.refuel_oil()
            self.refuel_uranium()
            self.build_rocket()
            self.launch_rocket()
<<<<<<< HEAD
=======
            if globals.planets == {}: #Quando o dicion√°rio de planetas fica vazio significa que todos os planetas est√£o habitaveis e o processo pode ser finalizado.
                print("TODOS OS PLANETAS EST√ÉO TERRAFORMADOS")
                os._exit(os.X_OK) # comando para matar o processo.
>>>>>>> origin/HEAD
            pass
